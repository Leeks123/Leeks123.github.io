(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{386:function(e,n,t){"use strict";t.r(n);var r=t(42),o=Object(r.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"실행컨텍스트"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#실행컨텍스트"}},[e._v("#")]),e._v(" 실행컨텍스트")]),e._v(" "),t("h2",{attrs:{id:"실행-컨텍스트란"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#실행-컨텍스트란"}},[e._v("#")]),e._v(" 실행 컨텍스트란?")]),e._v(" "),t("p",[e._v("코드가 실행되기 위해서는 선언된 변수, 함수, 스코프, this, arguments 등의 정보가 필요하다. 자바스크립트는 이러한 정보들을 가진 객체의 형태로 관리한다. 이것이 "),t("strong",[e._v("실행 컨텍스트")]),e._v("이다.")]),e._v(" "),t("p",[e._v("실행 컨텍스트는 전역 실행 컨텍스트, 함수 실행 컨텍스트, eval 실행 컨텍스트가 있다."),t("br"),e._v("\n전역 실행 컨텍스트는 프로그램 실행 시 생성되며,"),t("br"),e._v("\n함수 실행 컨텍스트는 함수 호출떄마다 생성된다.")]),e._v(" "),t("p",[e._v("이러한 실행 컨텍스트들은 자바스크립트 엔진의 콜 스택에 의해서 관리(?), 처리된다.")]),e._v(" "),t("h2",{attrs:{id:"실행컨텍스트의-구조"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#실행컨텍스트의-구조"}},[e._v("#")]),e._v(" 실행컨텍스트의 구조")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 실행 컨텍스트의 추상적인 구조\nExecution Context = {\n  Lexical Environment : {\n    Environment Records : {\n      Declarative Environment Record : {\n        Function Environment Record,\n        Module Environment Record\n      },\n      Object Environment Record,\n      Global Environment Record\n    },\n    Reference to the outer Environment : xxx\n  },\n  Variable Environment : {\n    // lexical environment와 구조는 동일\n  }\n}\n")])])]),t("p",[e._v("실행 컨텍스트는 "),t("strong",[e._v("Lexical Environment")]),e._v("와 "),t("strong",[e._v("Variable Environment")]),e._v("로 구성된다.")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Lexical Environment")]),t("br"),e._v("\n코드에서의 식별자와 식별자에 대입된 값들이 매핑된 정보를 가진 곳이라고 생각할 수 있다."),t("br"),e._v("\nLexical Environment의 구성 요소는 다음과 같다.\n"),t("ol",[t("li",[t("strong",[e._v("Environment Records")]),t("br"),e._v("\n스코프 내의 함수와 변수를 기록한다\n"),t("ul",[t("li",[t("strong",[e._v("Declarative Environment Record")]),t("br"),e._v("변수와 함수 선언을 여기에 저장. "),t("br"),e._v("\n이를 상속한 "),t("strong",[e._v("Function Env Record")]),e._v("에 "),t("code",[e._v("this")]),e._v(","),t("code",[e._v("new.target")]),e._v(","),t("code",[e._v("super")]),e._v(" 등의 정보가 기록된다."),t("br"),e._v(" "),t("strong",[e._v("Module Env Record")]),e._v("에는 Module단에서의 스코프를 나타낸다.")]),e._v(" "),t("li",[t("strong",[e._v("Object Environment Record")]),t("br"),e._v("\nBinding Object라는 객체와 연결된다고 하는데 잘 모르겠다. 자세한 내용은 "),t("a",{attrs:{href:"http://dmitrysoshnikov.com/ecmascript/es5-chapter-3-2-lexical-environments-ecmascript-implementation/#object-environment-record",target:"_blank",rel:"noopener noreferrer"}},[e._v("링크"),t("OutboundLink")],1),e._v("를 참조..")]),e._v(" "),t("li",[t("strong",[e._v("Global Environment Record")]),t("br"),e._v("\n이름 그대로 가장 바깥쪽의 스코프(전역 스코프)를 참조하는 레코드.")])])]),e._v(" "),t("li",[t("strong",[e._v("Reference to the outer environment")]),t("br"),e._v("\n상위 스코프의 Lexical Env를 참조한다."),t("br"),e._v("이걸 기반으로 "),t("RouterLink",{attrs:{to:"/studylog/js/Scope.html"}},[e._v("스코프 체인")]),e._v("이 형성된다. 현재 스코프 내의 변수들 중에 참조하려는 변수가 없다면 이 참조를 통해 상위 스코프로 가서 변수를 찾는다.")],1)])]),e._v(" "),t("li",[t("strong",[e._v("Variable Environment")]),t("br"),e._v("\n기본적으로 "),t("strong",[e._v("Lexical Env")]),e._v("와 구성은 같다. "),t("br"),e._v("다른 점은 LexicalEnv는 함수 선언과 변수 (let과 const)의 바인딩을 저장하고 Variable Env는 변수 var 만 저장한다.")])]),e._v(" "),t("h2",{attrs:{id:"실행컨텍스트의-생성"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#실행컨텍스트의-생성"}},[e._v("#")]),e._v(" 실행컨텍스트의 생성")]),e._v(" "),t("p",[e._v("실행 컨텍스트의 생성은 다음 2단계로 이뤄진다.")]),e._v(" "),t("h3",{attrs:{id:"creation-phase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#creation-phase"}},[e._v("#")]),e._v(" Creation Phase")]),e._v(" "),t("p",[e._v("Lexical Environment와 Variable Environment의 정의가 이루어진다."),t("br"),e._v(" Outer Reference가 결정 되고, "),t("br"),e._v("\nEnvironment Record에서 식별자들에 대한 메모리 할당이 진행된다.")]),e._v(" "),t("p",[e._v("Lexical Env에서는 "),t("code",[e._v("let, const")]),e._v("가 메모리에 할당되지만 초기화되지는 않는다."),t("br"),e._v("\nVariable Env에서는 "),t("code",[e._v("var")]),e._v("에 대해서 "),t("code",[e._v("undefined")]),e._v("로 초기화(?)된다.")]),e._v(" "),t("p",[e._v("이 과정이 "),t("RouterLink",{attrs:{to:"/studylog/js/Hoisting.html"}},[e._v("Hoisting")]),e._v("이 일어나는 이유이다."),t("br"),e._v("\n자바스크립트 엔진은 코드를 Parsing, Interpreting하면서 선언된 변수, 함수를 찾아 메모리에 저장한다. (호이스팅한다.)")],1),e._v(" "),t("h3",{attrs:{id:"execution-phase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#execution-phase"}},[e._v("#")]),e._v(" Execution Phase")]),e._v(" "),t("p",[e._v("이제 자바스크립트 엔진은 해석한 코드를 한줄 한줄 실행하고, 이 과정에서 변수에 값이 할당된다.")]),e._v(" "),t("p",[e._v("그리고 함수가 호출되는 순간 함수에 대한 실행컨텍스트가 생성되는 작업이 진행된다. "),t("br"),e._v("\n함수 실행 컨텍스트에서 "),t("code",[e._v("arguments")]),e._v("도 생성된다.")]),e._v(" "),t("p",[t("br"),t("br")]),e._v(" "),t("hr"),e._v(" "),t("blockquote",[t("p",[t("strong",[e._v("Reference")]),t("br"),e._v(" "),t("a",{attrs:{href:"https://roseline.oopy.io/dev/javascript-back-to-the-basic/environment-record",target:"_blank",rel:"noopener noreferrer"}},[e._v("자바스크립트 실행컨텍스트#1 - 환경 레코드"),t("OutboundLink")],1),e._v(" "),t("br"),e._v(" "),t("a",{attrs:{href:"https://meetup.toast.com/posts/129",target:"_blank",rel:"noopener noreferrer"}},[e._v("자바스크립트 함수(3) - Lexical Environment"),t("OutboundLink")],1),t("br"),e._v(" "),t("a",{attrs:{href:"https://dkje.github.io/2020/08/30/ExecutionContext/",target:"_blank",rel:"noopener noreferrer"}},[e._v("[JS]Execution Context와 Call Stack"),t("OutboundLink")],1),e._v(" "),t("br"),e._v(" "),t("a",{attrs:{href:"https://catsbi.oopy.io/fffa6930-ca30-4f7e-88b6-28011fde5867",target:"_blank",rel:"noopener noreferrer"}},[e._v("실행 컨텍스트와 자바스크립트의 동작 원리"),t("OutboundLink")],1),e._v(" "),t("br"),e._v(" "),t("a",{attrs:{href:"https://velog.io/@imacoolgirlyo/JS-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-Hoisting-The-Execution-Context-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85-%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-6bjsmmlmgy",target:"_blank",rel:"noopener noreferrer"}},[e._v("[JS] 자바스크립트의 The Execution Context (실행 컨텍스트) 와 Hoisting (호이스팅)"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);n.default=o.exports}}]);