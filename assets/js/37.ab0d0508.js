(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{364:function(t,e,a){"use strict";a.r(e);var s=a(42),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"이벤트"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#이벤트"}},[t._v("#")]),t._v(" 이벤트")]),t._v(" "),a("h2",{attrs:{id:"이벤트-흐름"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#이벤트-흐름"}},[t._v("#")]),t._v(" 이벤트 흐름")]),t._v(" "),a("p",[a("img",{attrs:{alt:"이벤트 흐름",src:"https://www.w3.org/TR/DOM-Level-3-Events/images/eventflow.svg",width:"450px"}}),a("br")]),t._v(" "),a("p",[t._v("이벤트의 흐룸은 위의 그림과 같이 root 노드로부터 target 노드까지의 capturing의 과정, target 노드에서의 과정 (실제로는 별도로 처리되지 않음), 그리고 다시 root 노드로 거슬러 올라가는 bubbling의 과정이 있다.")]),t._v(" "),a("h3",{attrs:{id:"캡처링"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#캡처링"}},[t._v("#")]),t._v(" 캡처링")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("elem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("currentTarget"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"capturing phase"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("위의 코드와 같이 "),a("code",[t._v("addEventListener")]),t._v("의 "),a("code",[t._v("options")]),t._v(" 파라미터에 "),a("code",[t._v("true")]),t._v("를 넘기면 캡처링 단계의 이벤트를 동작시킬 수 있다.")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("addEventListener")]),t._v("의 "),a("strong",[t._v("options")]),a("br")]),t._v(" "),a("ul",[a("li",[t._v("once"),a("br"),t._v(" true이면 이벤트가 트리거 될 때 리스너가 자동으로 삭제.")]),t._v(" "),a("li",[t._v("capture"),a("br"),t._v(" "),a("code",[t._v("true")]),t._v("이면 캡처링 단계, "),a("code",[t._v("false")]),t._v("이면 버블링 단계에서 이벤트 다룸. 기본값은 "),a("code",[t._v("false")]),t._v("."),a("br"),t._v("굳이 객체로 넘길 필요 없이 "),a("code",[t._v("true/false")]),t._v("만 넘겨도 "),a("code",[t._v("{capture: true/false}")]),t._v("로 동작")]),t._v(" "),a("li",[t._v("passive"),a("br"),t._v(" true이면 리스너에서 지정한 함수가 preventDefault()를 호출하지 않음")])])]),t._v(" "),a("p",[t._v("이벤트의 흐름에서 주로 이용되는 것은 버블링 단계이다. 캡처링 단계는 "),a("strong",[t._v("거의")]),t._v(" 이용되지 않는다.")]),t._v(" "),a("p",[a("strong",[t._v("거의")]),t._v(" 이용되지 않는 캡처링 단계도 이용될 때가 있다."),a("br"),t._v("\n바로 bubble 단계가 진행되지 않는 이벤트들에 대한 처리를 할 때이다. "),a("br"),t._v("\n대표적인 이벤트는 "),a("code",[t._v("focus")]),t._v(", "),a("code",[t._v("blur")]),t._v(" 이벤트이다. 그외의 다른 것들은 다음의 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/DOM_events#Events",target:"_blank",rel:"noopener noreferrer"}},[t._v("Reference"),a("OutboundLink")],1),t._v("를 참고하자.")]),t._v(" "),a("h3",{attrs:{id:"버블링"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#버블링"}},[t._v("#")]),t._v(" 버블링")]),t._v(" "),a("p",[t._v("한 요소에 이벤트가 발생하면, 이 요소에 할당된 핸들러가 동작하고, 이어서 부모 요소의 핸들러가 동작한다. 가장 최상단의 조상 요소를 만날 때까지 이 과정이 반복되면서 요소 각각에 할당된 핸들러가 동작한다.")]),t._v(" "),a("p",{staticClass:"codepen",staticStyle:{height:"300px","box-sizing":"border-box",display:"flex","align-items":"center","justify-content":"center",border:"2px solid",margin:"1em 0",padding:"1em"},attrs:{"data-height":"300","data-theme-id":"dark","data-default-tab":"js,result","data-user":"leeks123","data-slug-hash":"LYWOJMJ","data-pen-title":"Event practice"}},[a("span",[t._v("See the Pen "),a("a",{attrs:{href:"https://codepen.io/leeks123/pen/LYWOJMJ"}},[t._v("\n  Event practice")]),t._v(" by Leeks123 ("),a("a",{attrs:{href:"https://codepen.io/leeks123"}},[t._v("@leeks123")]),t._v(")\n  on "),a("a",{attrs:{href:"https://codepen.io"}},[t._v("CodePen")]),t._v(".")])]),t._v(" "),a("script",{attrs:{async:"",src:"https://cpwebassets.codepen.io/assets/embed/ei.js"}}),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"이벤트-객체"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#이벤트-객체"}},[t._v("#")]),t._v(" 이벤트 객체")]),t._v(" "),a("p",[t._v("이벤트 객체는 이벤트 발생시 핸들러에 넘겨지는 객체로, 이벤트와 관련된 정보가 이 객체 내에 존재한다.")]),t._v(" "),a("p",[t._v("이벤트마다 내용이 다르지만, 공통적인 프로퍼티, 메서드는 다음과 같다.")]),t._v(" "),a("h3",{attrs:{id:"프로퍼티"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#프로퍼티"}},[t._v("#")]),t._v(" 프로퍼티")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("Event.target")]),a("br"),t._v("\n실제 이벤트가 발생한 엘레먼트, 버블링이 진행되더라도 이 값은 변하지 않음")]),t._v(" "),a("li",[a("code",[t._v("Event.currentTarget")]),a("br"),t._v("\n현재 이벤트를 핸들링하고 있는 요소. "),a("code",[t._v("this")]),t._v("가 가리키는 엘레먼트..")]),t._v(" "),a("li",[a("code",[t._v("Event.type")]),a("br"),t._v("\n발생한 이벤트의 종류를 문자열로 반환")]),t._v(" "),a("li",[a("code",[t._v("Event.cancelable")]),a("br"),t._v(" "),a("code",[t._v("e.preventDefault()")]),t._v("를 실행시켜서 기본동작을 취소시킬 수 있는지를 "),a("code",[t._v("true")]),t._v("/"),a("code",[t._v("false")]),t._v("로 반환")]),t._v(" "),a("li",[a("code",[t._v("Event.eventPhase")]),a("br"),t._v("\n이벤트 흐름의 현재 단계를 반환"),a("br"),t._v("\n( 0: 이벤트 없음, 1: 캡처링, 2: 타깃, 3: 버블링)")])]),t._v(" "),a("h3",{attrs:{id:"메서드"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#메서드"}},[t._v("#")]),t._v(" 메서드")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("Event.stopPropagation()")]),a("br"),t._v("\n이벤트 핸들러 함수를 통한 이벤트 처리 후 이후 버블링 단계를 진행시키지 않도록 하는 메서드")]),t._v(" "),a("li",[a("code",[t._v("Event.preventDefault()")]),a("br"),t._v("\n해당 엘레먼트가 가지는 이벤트의 기본 동작을 취소시킨다.")])]),t._v(" "),a("h2",{attrs:{id:"이벤트-위임"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#이벤트-위임"}},[t._v("#")]),t._v(" 이벤트 위임")]),t._v(" "),a("p",[t._v("이벤트 위임은 다수의 자식 엘레먼트에 똑같은 이벤트 핸들러를 다는 대신 공통 조상 하나에만 달아서 이벤트를 처리하는 방식.")]),t._v(" "),a("p",[t._v("이벤트 버블링과 "),a("code",[t._v("e.target")]),t._v("을 활용한 방식이다.")]),t._v(" "),a("p",[t._v("이벤트 위임의 장점은 다음과 같다."),a("br")]),t._v(" "),a("ul",[a("li",[t._v("각 하위 항목에 이벤트 핸들러를 연결하지 않고, 상위 요소에 하나의 단일 핸들러만 필요하기 때문에 메모리 사용 공간이 줄어든다.")]),t._v(" "),a("li",[t._v("제거된 요소에서 핸들러를 해제하고 새 요소에 대해 이벤트를 바인딩할 필요가 없어진다.")])]),t._v(" "),a("p",[a("br"),a("br")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("Reference")]),a("br"),t._v(" "),a("a",{attrs:{href:"https://ko.javascript.info/events",target:"_blank",rel:"noopener noreferrer"}},[t._v("이벤트 기초"),a("OutboundLink")],1),t._v(" "),a("br"),t._v(" "),a("a",{attrs:{href:"https://poiemaweb.com/js-event",target:"_blank",rel:"noopener noreferrer"}},[t._v("이벤트"),a("OutboundLink")],1),t._v(" "),a("br")])])])}),[],!1,null,null,null);e.default=r.exports}}]);