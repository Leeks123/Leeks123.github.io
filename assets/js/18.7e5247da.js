(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{383:function(e,t,r){"use strict";r.r(t);var n=r(42),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"자바스크립트-엔진"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#자바스크립트-엔진"}},[e._v("#")]),e._v(" 자바스크립트 엔진")]),e._v(" "),r("h2",{attrs:{id:"interpreter-compiler-pipelines"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#interpreter-compiler-pipelines"}},[e._v("#")]),e._v(" Interpreter/compiler pipelines")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://shlrur.github.io//assets/images/javascript_engine_fundamentals_shape_and_inline_caches/0_js-engine-pipeline.png",alt:"javascriptEnginePipeline"}})]),e._v(" "),r("p",[e._v("브라우저마다 엔진 동작 방식이 조금씩 다르지만, 전체적인 틀은 위와 같다.")]),e._v(" "),r("p",[e._v("자바스크립트는 인터프리터 언어이자 JITC 언어이다."),r("br"),e._v(" "),r("strong",[e._v("JITC (Just in time Compilation)")]),e._v(" 이란 런타임 시점에서 기계어로 번역하는 컴파일 기법이다.")]),e._v(" "),r("p",[e._v("자바스크립트 소스코드를 parsing하여 AST를 구성한 후 interpreter를 통해 bytecode를 변환한다. 그런 다음 interpreter 모드라면 bytecode를 하나씩 읽어가며 동작을 수행하고, JIT 모드라면 생성된 bytecode를 기반으로 native code로 컴파일 하여 수행하게 된다.\n"),r("br"),r("br")]),e._v(" "),r("p",[e._v("여기에서 interpreter라고 더 느리고, JITC라고 더 빠른 것도 아니다. 상황에 따라 다르다."),r("br"),e._v("자바스크립트는 변수의 타입도 달라질 수 있고, 객체도 prototype 방식이라는 점 등 매우 동적인 언어이다. 따라서 예외처리를 한 native code를 생성해야하는데, 이 과정을 거치는 컴파일은 interpreter와 큰 차이가 없게 된다."),r("br"),e._v("그리고 만약 연산량이 적은 프로그램, 자주 반복되서 수행되는 구간("),r("strong",[e._v("Hotspot")]),e._v(")이 적은 프로그램이라면 compile overhead가 더 커지게 되어 오히려 JITC가 느리게 된다.\n"),r("br"),r("br")]),e._v(" "),r("p",[e._v("위와 같은 문제를 해결하기 위해 모던 브라우저는 "),r("strong",[e._v("Adaptive JIT Compilation")]),e._v(" 방식을 택한다.")]),e._v(" "),r("p",[e._v("기본적으로 모든 코드는 처음에 interpreter로 수행하여 생성한 bytecode에서 Hotspot이 발견되면, 그 부분에 대해서만 JITC를 적용하여 native code로 수행한다. 이 과정을 여러 단계로 진행하여 optimized code를 생성한다.\n"),r("br"),r("br")]),e._v(" "),r("h2",{attrs:{id:"가비지-컬렉션"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#가비지-컬렉션"}},[e._v("#")]),e._v(" 가비지 컬렉션")]),e._v(" "),r("img",{attrs:{width:"947",alt:"가비지컬렉션",src:"https://user-images.githubusercontent.com/37547661/117708814-35af5700-b20b-11eb-9729-4ac9cf9e48e9.png"}}),e._v(" "),r("p",[e._v("자바스크립트에서의 가비지 컬렉션은 "),r("strong",[e._v("Mark and Sweep")]),e._v(" 알고리즘으로 이뤄진다.")]),e._v(" "),r("p",[e._v("root 객체 집합(자바스크립트에서는 전역변수)을 시작으로 닿을 수 있는(참조하고 있는) 객체를 전부 마킹한다. 그리고 닿지 않는 객체들에 대해서 가비지 컬렉션을 수행한다.")]),e._v(" "),r("blockquote",[r("p",[r("strong",[e._v("참조 카운팅 알고리즘")]),r("br"),e._v("\nIE6, 7에서는 참조 카운팅 알고리즘 기반의 가비지 콜렉션을 활용한다. 이 알고리즘의 문제는 순환참조로 인한 메모리 누수가 발생한다"),r("br"),r("br"),e._v("\nMark and sweep 알고리즘에서는 발생하지 않는 문제이다.")])]),e._v(" "),r("br"),e._v(" "),r("hr"),e._v(" "),r("blockquote",[r("p",[r("strong",[e._v("Reference")]),e._v(" "),r("br"),e._v(" "),r("a",{attrs:{href:"https://shlrur.github.io/javascripts/javascript-engine-fundamentals-shapes-and-Inline-caches/",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript engine fundamentals: Shapes and Inline Caches"),r("OutboundLink")],1),e._v(" "),r("br"),e._v(" "),r("a",{attrs:{href:"https://meetup.toast.com/posts/77",target:"_blank",rel:"noopener noreferrer"}},[e._v("자바스크립트 엔진의 최적화 기법 (1) - JITC, Adaptive Compilation"),r("OutboundLink")],1),e._v(" "),r("br"),e._v(" "),r("a",{attrs:{href:"https://developer.mozilla.org/ko/docs/Web/JavaScript/Memory_Management",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN 가비지컬렉션"),r("OutboundLink")],1),e._v(" "),r("br"),e._v(" "),r("a",{attrs:{href:"https://zerotomastery.io/cheatsheets/javascript-cheatsheet-the-advanced-concepts/?utm_source=udemy&utm_medium=coursecontent#JavaScriptEngine",target:"_blank",rel:"noopener noreferrer"}},[e._v("zerotomastery.io"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=a.exports}}]);